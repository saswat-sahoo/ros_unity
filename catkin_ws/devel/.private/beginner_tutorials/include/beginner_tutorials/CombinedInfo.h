// Generated by gencpp from file beginner_tutorials/CombinedInfo.msg
// DO NOT EDIT!


#ifndef BEGINNER_TUTORIALS_MESSAGE_COMBINEDINFO_H
#define BEGINNER_TUTORIALS_MESSAGE_COMBINEDINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beginner_tutorials
{
template <class ContainerAllocator>
struct CombinedInfo_
{
  typedef CombinedInfo_<ContainerAllocator> Type;

  CombinedInfo_()
    : linear_acceleration()
    , angular_velocity()
    , rotation()  {
      linear_acceleration.assign(0);

      angular_velocity.assign(0);

      rotation.assign(0);
  }
  CombinedInfo_(const ContainerAllocator& _alloc)
    : linear_acceleration()
    , angular_velocity()
    , rotation()  {
  (void)_alloc;
      linear_acceleration.assign(0);

      angular_velocity.assign(0);

      rotation.assign(0);
  }



   typedef boost::array<int64_t, 3>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef boost::array<int64_t, 3>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef boost::array<int64_t, 3>  _rotation_type;
  _rotation_type rotation;





  typedef boost::shared_ptr< ::beginner_tutorials::CombinedInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::CombinedInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CombinedInfo_

typedef ::beginner_tutorials::CombinedInfo_<std::allocator<void> > CombinedInfo;

typedef boost::shared_ptr< ::beginner_tutorials::CombinedInfo > CombinedInfoPtr;
typedef boost::shared_ptr< ::beginner_tutorials::CombinedInfo const> CombinedInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beginner_tutorials::CombinedInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beginner_tutorials::CombinedInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beginner_tutorials::CombinedInfo_<ContainerAllocator1> & lhs, const ::beginner_tutorials::CombinedInfo_<ContainerAllocator2> & rhs)
{
  return lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.rotation == rhs.rotation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beginner_tutorials::CombinedInfo_<ContainerAllocator1> & lhs, const ::beginner_tutorials::CombinedInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::CombinedInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::CombinedInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::CombinedInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::CombinedInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::CombinedInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::CombinedInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::CombinedInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81953f79fe8ffdaa1da172c5ee7b8504";
  }

  static const char* value(const ::beginner_tutorials::CombinedInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81953f79fe8ffdaaULL;
  static const uint64_t static_value2 = 0x1da172c5ee7b8504ULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::CombinedInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beginner_tutorials/CombinedInfo";
  }

  static const char* value(const ::beginner_tutorials::CombinedInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::CombinedInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64[3] linear_acceleration\n"
"int64[3] angular_velocity\n"
"int64[3] rotation\n"
"\n"
;
  }

  static const char* value(const ::beginner_tutorials::CombinedInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::CombinedInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear_acceleration);
      stream.next(m.angular_velocity);
      stream.next(m.rotation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CombinedInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner_tutorials::CombinedInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beginner_tutorials::CombinedInfo_<ContainerAllocator>& v)
  {
    s << indent << "linear_acceleration[]" << std::endl;
    for (size_t i = 0; i < v.linear_acceleration.size(); ++i)
    {
      s << indent << "  linear_acceleration[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.linear_acceleration[i]);
    }
    s << indent << "angular_velocity[]" << std::endl;
    for (size_t i = 0; i < v.angular_velocity.size(); ++i)
    {
      s << indent << "  angular_velocity[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.angular_velocity[i]);
    }
    s << indent << "rotation[]" << std::endl;
    for (size_t i = 0; i < v.rotation.size(); ++i)
    {
      s << indent << "  rotation[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.rotation[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_COMBINEDINFO_H
