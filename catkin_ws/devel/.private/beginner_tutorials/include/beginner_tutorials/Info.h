// Generated by gencpp from file beginner_tutorials/Info.msg
// DO NOT EDIT!


#ifndef BEGINNER_TUTORIALS_MESSAGE_INFO_H
#define BEGINNER_TUTORIALS_MESSAGE_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <beginner_tutorials/Vector3.h>
#include <beginner_tutorials/Vector3.h>
#include <beginner_tutorials/Vector3.h>

namespace beginner_tutorials
{
template <class ContainerAllocator>
struct Info_
{
  typedef Info_<ContainerAllocator> Type;

  Info_()
    : linear()
    , angular()
    , rota()  {
    }
  Info_(const ContainerAllocator& _alloc)
    : linear(_alloc)
    , angular(_alloc)
    , rota(_alloc)  {
  (void)_alloc;
    }



   typedef  ::beginner_tutorials::Vector3_<ContainerAllocator>  _linear_type;
  _linear_type linear;

   typedef  ::beginner_tutorials::Vector3_<ContainerAllocator>  _angular_type;
  _angular_type angular;

   typedef  ::beginner_tutorials::Vector3_<ContainerAllocator>  _rota_type;
  _rota_type rota;





  typedef boost::shared_ptr< ::beginner_tutorials::Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::Info_<ContainerAllocator> const> ConstPtr;

}; // struct Info_

typedef ::beginner_tutorials::Info_<std::allocator<void> > Info;

typedef boost::shared_ptr< ::beginner_tutorials::Info > InfoPtr;
typedef boost::shared_ptr< ::beginner_tutorials::Info const> InfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beginner_tutorials::Info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beginner_tutorials::Info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beginner_tutorials::Info_<ContainerAllocator1> & lhs, const ::beginner_tutorials::Info_<ContainerAllocator2> & rhs)
{
  return lhs.linear == rhs.linear &&
    lhs.angular == rhs.angular &&
    lhs.rota == rhs.rota;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beginner_tutorials::Info_<ContainerAllocator1> & lhs, const ::beginner_tutorials::Info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::Info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9424e4f2ea440d61cdcc97ed9f70470f";
  }

  static const char* value(const ::beginner_tutorials::Info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9424e4f2ea440d61ULL;
  static const uint64_t static_value2 = 0xcdcc97ed9f70470fULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beginner_tutorials/Info";
  }

  static const char* value(const ::beginner_tutorials::Info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Vector3  linear\n"
"Vector3  angular\n"
"Vector3  rota\n"
"\n"
"================================================================================\n"
"MSG: beginner_tutorials/Vector3\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::beginner_tutorials::Info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::Info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear);
      stream.next(m.angular);
      stream.next(m.rota);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner_tutorials::Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beginner_tutorials::Info_<ContainerAllocator>& v)
  {
    s << indent << "linear: ";
    s << std::endl;
    Printer< ::beginner_tutorials::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear);
    s << indent << "angular: ";
    s << std::endl;
    Printer< ::beginner_tutorials::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular);
    s << indent << "rota: ";
    s << std::endl;
    Printer< ::beginner_tutorials::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rota);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_INFO_H
